# -*- mode:org; fill-column:79; -*-

#+title:HackerRank Coding Problems
#+subtitle:{{{date}}} {{{version}}}
#+date:2019-6-20 08:59
#+macro:version Version 0.1.0
* Data Structures
** Arrays
*** 2D Array
**** 2D Problem Definition
Given a 6 \times 6 =2D Array=, ~arr~

#+begin_src sh
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
#+end_src

#+cindex:hourglass, dfn
We define an {{{dfn(hourglass)}}} in =A= to be /a subset of values with indices
falling in this pattern in ~arr~'s graphical representation/:

#+begin_src sh
a b c
  d
e f g
#+end_src

#+cindex:hourglass sum, dfn
There are 16 hourglasses in ~arr~, and an {{{dfn(hourglass sum)}}} is /the sum
of an hourglass' values/.  Calculate the hourglass sum for every hourglass in
~arr~, then print the maximum hourglass sum.

For example, given the =2D array=:
#+begin_src sh
-9 -9 -9  1 1 1
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0
#+end_src
we calculate the following hourglass values:

#+begin_src sh
-63, -34, -9, 12, 
-10, 0, 28, 23, 
-27, -11, -2, 10, 
9, 17, 25, 18
#+end_src

Our highest hourglass value is 16 from the hourglass:

#+begin_src sh
0 4 3
  1
8 6 6
#+end_src

{{{heading(Function Description)}}}

Complete the function ~hourglassSum~ in the editor below.  It should return an
integer, the maximum hourglass sum in the array.

~hourglassSum~ has the following parameter(s):

#+attr_texinfo: :options hourglassSum arr
#+begin_defun
{{{var(arr)}}} is an array of integers 6 \times 6 in size (i.e., a =2D Array=).
This function calculates the largest hourglass sum in the =2D Array=, returning
its value.
#+end_defun

{{{heading(Input Format)}}}

Each of the 6 lines of inputs ~arr[i]~ contains 6 space-separated integers
~arr[i][j]~.

{{{subheading(Sample Input)}}}

#+begin_example
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
#+end_example

{{{heading(Constraints)}}}

- \minus9 \le arr[i][j] \le 9

- 0 \le i, j \le 5

{{{heading(Output Format)}}}

Print the largest (maximum) hourglass sum found in ~arr~.

{{{subheading(Sample Output)}}}

: 19

{{{heading(Explanation)}}}

~arr~ contains the following hourglasses:

#+caption:Description of hourglasses
#+name:hourglasses
[[file:figs/hourglasssum.png]]

The hourglass with the maximum sum (19) is:

#+begin_example
2 4 4
  2
1 2 4
#+end_example

**** 2D Code Framework

{{{heading(Dependencies)}}}

The preliminary code sets up the dependencies
- Node.js =File System=,
- the encoding of ~process.stdin~ as a =utf-8= string, and
- an output file, ~result~)

#+name:2d-array-dependencies
#+begin_src js :tangle array2d/node/index.js :mkdirp yes
'use strict';

const fs = require('fs');

process.stdin.setEncoding('utf-8');
process.env.OUTPUT_PATH = './result';
#+end_src

{{{heading(Declarations)}}}

The /declarations/ section declares some variables that will be needed in the
program:
- ~inputString~ :: the 2D array as a multi-line string of numbers
- ~currentLine~ :: a counter used in the ~readLine()~ function for each row of
                   the 2D array
- ~ROWS~ and ~COLUMNS~:: maximum size of the 2D array

#+name:2d-array-declarations
#+begin_src js :tangle array2d/node/index.js
let inputString = '';
let currentLine = 0;
const ROWS = 6, COLUMNS = 6;
#+end_src

{{{heading(Input)}}}

The /Input/ section reads ~STDIN~ for a multi-line string of numbers.  It
breaks the string into a single dimension array containing space-separated
numbers using Node's ~process.stdin~ =StreamReader= built-in.

The =readable= event indicates that some data is ready to be read.  The data is
placed into an internal buffer.  The size of the internal buffer is unknown,
and the size of the data stream is unknown.  Therefore, after receiving a
=readable= event, the code calls the =ReadableStream='s ~read()~ method
repeatedly until the buffer is empty.  This repeats until there is no more data
to be read, at which point the program receives the =end= event.

When the =end= event is received, the program splits the input on newlines,
removing all trailing spaces, and returns an array of rows.  The rows are still
in string form as space-separated numbers.  These will be handled by the
~readLine()~ function.

#+name:2d-array-process-input
#+begin_src js :tangle array2d/node/index.js
process.stdin.on('readable', () => {
    console.log('readable ...');

    let chunk;
    while ((chunk = process.stdin.read()) !== null) {
        console.log(`chunk:\n${chunk}`);
        inputString += chunk;
    }
});

process.stdin.on('end', () => {
    console.log(`'end'\ninputString:\n${inputString}`);
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});
#+end_src

{{{heading(readLine() Function)}}}

The /Process/ section described above runs immediately upon execution of the
program to read the standard input and set up the ~inputString~.  The ~main()~
function calls the ~readLine()~ function to obtain each row of the array.

#+name:array2d-readline
#+begin_src js :tangle array2d/node/index.js
function readLine () {
    return inputString[currentLine++];
}
#+end_src

{{{heading(main() Function)}}}

The ~main()~ function establishes a =WritableStream= (~OUTPUT_PATH~), creates
a single-dimension array ~arr~ of size ~ROWS~, iterates over the array's rows,
processes each row into an array of numbers, and ultimately obtains a
two-dimensional array in ~arr[i][j]~.

Then, it calls the function ~hourglassSum()~, passing in a reference to this
two-dimensional array ~arr~, and receives back the result, which it then
stores in the output file ~OUTPUT_PATH~.  Finally, it closes the output file,
using the ~end()~ method of the =WritableStream=.

#+name:array2d-main
#+begin_src js :tangle array2d/node/index.js
function main () {
    console.log('main');

    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    let arr = Array(ROWS);

    for (let i = 0; i < ROWS; i++) {
        arr[i] = readLine()
            .split(' ')
            .map(arrTemp => parseInt(arrTemp, 10));

        console.log(`i: ${i}\n${arr[i]}`);
    }

    let result = hourglassSum(arr);
    console.log(`result: ${result}`);

    ws.write(result + "\n");

    ws.end();
}
#+end_src

**** Hourglass Sum Function

This is the solution to the problem.  All of the other code simply supports
it.  The ~hourglassSum()~ function receives a reference to a 2D array of equal
rows and columns.  The problem defines its size as a 6 \times 6 2D array.

The solution iterates over the center of each hourglass and counts up the sum
of the elements of the hourglass, calculating whether a new maximum value has
been achieved, then returns the maximum value at the conclusion of checking all
hourglasses.

#+name:array2d-hourglassSum-function
#+begin_src js :tangle array2d/node/index.js
function hourglassSum (arr) {
    let max, sum;
    for (let row = 1; row  < ROWS - 1; row++) {
        for (let col = 1; col < COLUMNS - 1; col++) {
            console.log(`row=${row} col=${col}`);
            sum = (
                arr[row-1][col-1] +
                arr[row-1][col]   +
                arr[row-1][col+1] +
                arr[row][col]     +
                arr[row+1][col-1] +
                arr[row+1][col]   +
                arr[row+1][col+1]
            );
            if (typeof max === 'undefined' || sum > max) {
                max = sum;
            }
            console.log(`sum=${sum} max=${max}`);
        }
    }
    return max;
}
#+end_src

* Concept Index
:PROPERTIES:
:index:    cp
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:index:    fn
:unnumbered: t
:END:

* Export Settings                                                  :noexport:
#+options: H:4
** Texinfo Export Settings
#+texinfo_filename:hackerrank.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:Coding
#+texinfo_dir_title:HackerRank Coding Problems
#+texinfo_dir_desc:HackerRank coding problems
#+texinfo_printed_title:HackerRank Coding Problems

** HTML Export Settings
#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:t tex:t H:6
#+html_doctype: html5
#+html_container: div
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head:
#+html_head_extra:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.2.4)
#+latex_header:

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@@@html:<h4>@@$1@@html:</h4>@@
#+macro:subheading @@texinfo:@subheading @@@@html:<h5>@@$1@@html:</h5>@@
#+macro:dfn @@texinfo:@dfn{@@@@html:<b>@@$1@@texinfo:}@@@@html:</b>@@
#+macro:var @@texinfo:@var{@@$1@@texinfo:}@@
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%:y-%:m-%:d %02H:%02M$"
# End:
